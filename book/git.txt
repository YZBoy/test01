github 代码的下载和提交：
1. git代码下载：git clone + 链接
2. 查看git代码分支：git branch /git branch -a
3. 切换分支：git checkout + 分支名称
4. 查看分支状态：git status
5. 提交：git add 文件/目录 (添加到暂存区)
6. 提交代码：git commit -m "提交描述" （提交到版本库）
7. 初始化：git init(初始化一个文件夹为本地仓库)(文件夹即工作区)
8. 提交代码到git服务器：git push
9. 将服务器的代码更新到本地：git pull
10.拉取新分支：git feach


HTTP协议的幂等性：是指一次和多次请求某一个资源应该具有同样的副作用
HTTP协议的安全性：仅指该方法的多次调用不会产生副作用，不涉及传统意义上的“安全”，这里的副作用是指资源状态。即，安全的方法不会修改资源状态，尽管多次调用的返回值可能不一样(被其他非安全方法修改过)

1，GET
安全、幂等；
用于获取资源；
（请求指定的页面信息，并返回实体主体）

2，HEAD
安全、幂等；
与get方法类似，但不返回message body内容，仅仅是获得获取资源的部分信息（content-type、content-length）；
restful框架中较少使用
（类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头）

3，POST
非安全、非幂等；
用于创建子资源
（向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改）

4，PUT
非安全、幂等；
用于创建、更新资源；
（从客户端向服务器传送的数据取代指定的文档的内容）

5，DELETE
非安全、幂等；
删除资源；
（请求服务器删除指定的页面）


6，OPTIONS
安全、幂等；
用于url验证，验证接口服务是否正常；
（允许客户端查看服务器的性能）

7，TEACE
安全、幂等；
维基百科“回显服务器收到的请求，这样客户端可以看到（如果有）哪一些改变或者添加已经被中间服务器实现。”
restful框架中较少使用
（回显服务器收到的请求，主要用于测试或诊断）

8，PATCH
非安全、幂等；
用于创建、更新资源，于PUT类似，区别在于PATCH代表部分更新；
后来提出的接口方法，使用时可能去要验证客户端和服务端是否支持；
（对 PUT 方法的补充，用来对已知资源进行局部更新）

